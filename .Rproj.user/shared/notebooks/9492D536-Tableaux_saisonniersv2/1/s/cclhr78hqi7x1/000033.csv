"0",""
"0","liste_partenaires <- unique(donnees_saisonnieres$Partenaire)"
"0","liste_annees <- unique(donnees_saisonnieres$Annee)"
"0","saisons <- factor(c(""Winter"", ""Spring"", ""Summer"", ""Fall""), levels = c(""Winter"", ""Spring"", ""Summer"", ""Fall""), ordered = TRUE)"
"0","table_annee_saison <- crossing(liste_annees, saisons)"
"0","liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = """")"
"0",""
"0","#liste_saisons <- c(""Spring2017"", ""Summer2017"", ""Fall2017"", ""Winter2017"", ""Spring2018"", ""Summer2018"", ""Fall2018"", ""Winter2018"", ""Spring2019"", ""Summer2019"", ""Fall2019"", ""Winter2019"", ""Spring2020"", ""Summer2020"", ""Fall2020"", ""Winter2020"")"
"0",""
"0","for (thePartner in liste_partenaires) {"
"0","  tableau_saisonnier <- donnees_saisonnieres %>%"
"0","    filter(Partenaire == thePartner) %>% "
"0","     #group_by(Partenaire, Annee, Saison) %>% "
"0","   #select(-Partner, -Difference_category) %>% "
"0","    arrange(Station, Saison) %>% "
"0","    # mutate(Season = case_when("
"0","    #   Saison == ""hiver"" ~ ""Winter"","
"0","    #   Saison == ""printemps"" ~ ""Spring"","
"0","    #   Saison == ""été"" ~ ""Summer"","
"0","    #   Saison == ""automne"" ~ ""Fall"","
"0","    #   Saison == NA ~ ""No season"""
"0","    # ),"
"0","    mutate(YearSeason = paste(Saison, as.character(Annee), sep = """")"
"0","    ) %>%"
"0","    #group_by(Station, YearSeason) %>% "
"0","    group_by(Station, YearSeason) %>% "
"0","    summarise(nSamples = n_distinct(Date)) %>% "
"0","    select(Station, YearSeason, nSamples)"
"0","  "
"0","  # Détermination des saisons présentes dans le fichier de données"
"0","  "
"0","  saisons_presentes <-unique(tableau_saisonnier$YearSeason)"
"0","  saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]"
"0","  #saisons_presentes <- (saison_presentes)"
"0","  "
"0","  # TEST D'UNE LISTE DE SAISON PRÉSENTES"
"0"," # lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]"
"0","    "
"0","  if (nrow(tableau_saisonnier > 0)) {"
"0","    tableau_saisonnier_large <- tableau_saisonnier %>% "
"0","        pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>% "
"0","      select(Station, saisons_presentes2)"
"0","       #select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)"
"0","            #   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020"
"0",""
"0","    # Vérifier si toutes les colonnes sont présentes"
"0",""
"0","    for(laColonne in liste_saisons) {"
"0","      if(!laColonne %in% colnames(tableau_saisonnier_large)) {"
"0","        tableau_saisonnier_large[[laColonne]] <- 0"
"0","      }"
"0","    }"
"0",""
"0",""
"0","    tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)"
"0","        leTableau_saisonnier <- tableau_saisonnier_large %>% "
"0","          arrange(Station) %>% "
"0","          gt(rowname_col = ""Station"")"
"0",""
"0","    leTableau_saisonnier <- "
"0","      leTableau_saisonnier %>% "
"0","      tab_header(title = md(paste(""Results for partner **"", thePartner, ""**"", sep = """")),"
"0","                    subtitle = paste(""Seasonal distribution of samples for "", min(liste_annees), ""-"", max(liste_annees), sep = """")) %>% "
"0","      tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>% "
"0","      tab_spanner(label = as.character(liste_annees[2]), columns = colnames(tableau_saisonnier_large)[6:9]) %>% "
"0","      tab_spanner(label = as.character(liste_annees[3]), columns = colnames(tableau_saisonnier_large)[10:13]) %>% "
"0","      cols_align("
"0","        align = ""center"","
"0","        columns = everything()"
"0","      ) "
"0",""
"0",""
"0",""
"0","    print(leTableau_saisonnier)"
"0",""
"0","    gtsave(leTableau_saisonnier, paste(""resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_"", thePartner, "".pdf"", sep = """" ))"
"0","    "
"0","    # Exportation d'une version Excel du tableau de résultats"
"0","    write_xlsx(tableau_saisonnier_large, paste(""resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_"", thePartner, "".xlsx"", sep = """" ))"
"0",""
"0","    #print('\n\n')"
"0",""
"0","  }"
"0",""
"0","}"
"2","`summarise()` has grouped output by 'Station'. You can override using the `.groups` argument."
