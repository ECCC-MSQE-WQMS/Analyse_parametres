}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = c(Spring2017, Summer2017, Fall2017, Winter2017)) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = c(Spring2018, Summer2018, Fall2018, Winter2018)) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = c(Spring2019, Summer2019, Fall2019, Winter2019)) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring"),
Spring2018 = html("Spring"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter"),
Winter2018 = html("Winter"),
Winter2019 = html("Winter"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
View(tableau_saisonnier_large)
colnames(tableau_saisonnier_large[:1-4])
colnames(tableau_saisonnier_large)[1-4]
colnames(tableau_saisonnier_large)
colnames(tableau_saisonnier_large[:2-4])
colnames(tableau_saisonnier_large[,2-4])
colnames(tableau_saisonnier_large)[,1-4]
colnames(tableau_saisonnier_large)[2-4]
colnames(tableau_saisonnier_large)[[2-4]]
colnames(tableau_saisonnier_large)
colnames(tableau_saisonnier_large)[2:4]
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:4]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = c(Spring2018, Summer2018, Fall2018, Winter2018)) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = c(Spring2019, Summer2019, Fall2019, Winter2019)) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring"),
Spring2018 = html("Spring"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter"),
Winter2018 = html("Winter"),
Winter2019 = html("Winter"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = c(Spring2018, Summer2018, Fall2018, Winter2018)) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = c(Spring2019, Summer2019, Fall2019, Winter2019)) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring"),
Spring2018 = html("Spring"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter"),
Winter2018 = html("Winter"),
Winter2019 = html("Winter"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = c(Spring2018, Summer2018, Fall2018, Winter2018)) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = c(Spring2019, Summer2019, Fall2019, Winter2019)) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring 17"),
Spring2018 = html("Spring 18"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter 17"),
Winter2018 = html("Winter 18"),
Winter2019 = html("Winter 19"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
print(leTableau_saisonnier)
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = colnames(tableau_saisonnier_large)[6:9]) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = colnames(tableau_saisonnier_large)[10:13]) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring 17"),
Spring2018 = html("Spring 18"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter 17"),
Winter2018 = html("Winter 18"),
Winter2019 = html("Winter 19"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = colnames(tableau_saisonnier_large)[6:9]) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = colnames(tableau_saisonnier_large)[10:13]) %>%
cols_align(
align = "center",
columns = everything()
) %>%
cols_label(
Spring2017 = html("Spring"),
Spring2018 = html("Spring"),
Spring2019 = html("Spring"),
Summer2017 = html("Summer"),
Summer2018 = html("Summer"),
Summer2019 = html("Summer"),
Fall2017 = html("Fall"),
Fall2018 = html("Fall"),
Fall2019 = html("Fall"),
Winter2017 = html("Winter 17"),
Winter2018 = html("Winter 18"),
Winter2019 = html("Winter 19"),
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
liste_partenaires <- unique(donnees_saisonnieres$Partenaire)
liste_annees <- unique(donnees_saisonnieres$Annee)
saisons <- factor(c("Winter", "Spring", "Summer", "Fall"), levels = c("Winter", "Spring", "Summer", "Fall"), ordered = TRUE)
table_annee_saison <- crossing(liste_annees, saisons)
liste_saisons <- paste(table_annee_saison$saisons, table_annee_saison$liste_annees, sep = "")
#liste_saisons <- c("Spring2017", "Summer2017", "Fall2017", "Winter2017", "Spring2018", "Summer2018", "Fall2018", "Winter2018", "Spring2019", "Summer2019", "Fall2019", "Winter2019", "Spring2020", "Summer2020", "Fall2020", "Winter2020")
for (thePartner in liste_partenaires) {
tableau_saisonnier <- donnees_saisonnieres %>%
filter(Partenaire == thePartner) %>%
#group_by(Partenaire, Annee, Saison) %>%
#select(-Partner, -Difference_category) %>%
arrange(Station, Saison) %>%
# mutate(Season = case_when(
#   Saison == "hiver" ~ "Winter",
#   Saison == "printemps" ~ "Spring",
#   Saison == "été" ~ "Summer",
#   Saison == "automne" ~ "Fall",
#   Saison == NA ~ "No season"
# ),
mutate(YearSeason = paste(Saison, as.character(Annee), sep = "")
) %>%
#group_by(Station, YearSeason) %>%
group_by(Station, YearSeason) %>%
summarise(nSamples = n_distinct(Date)) %>%
select(Station, YearSeason, nSamples)
# Détermination des saisons présentes dans le fichier de données
saisons_presentes <-unique(tableau_saisonnier$YearSeason)
saisons_presentes2 <- saisons_presentes[order(match(saisons_presentes, liste_saisons))]
#saisons_presentes <- (saison_presentes)
# TEST D'UNE LISTE DE SAISON PRÉSENTES
# lesSaisons <- liste_saisons[liste_saisons %in% saisons_presentes]
if (nrow(tableau_saisonnier > 0)) {
tableau_saisonnier_large <- tableau_saisonnier %>%
pivot_wider(names_from = YearSeason, values_from = nSamples, values_fill = 0) %>%
select(Station, saisons_presentes2)
#select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019, Spring2020, Summer2020, Fall2020, Winter2020)
#   select(Station, Spring2018, Summer2018, Fall2018, Winter2018, Spring2019, Summer2019, Fall2019, Winter2019) # Cas où aucune données n'est disponible en 2020
# Vérifier si toutes les colonnes sont présentes
for(laColonne in liste_saisons) {
if(!laColonne %in% colnames(tableau_saisonnier_large)) {
tableau_saisonnier_large[[laColonne]] <- 0
}
}
tableau_saisonnier_large <- as.data.frame(tableau_saisonnier_large)
leTableau_saisonnier <- tableau_saisonnier_large %>%
arrange(Station) %>%
gt(rowname_col = "Station")
leTableau_saisonnier <-
leTableau_saisonnier %>%
tab_header(title = md(paste("Results for partner **", thePartner, "**", sep = "")),
subtitle = paste("Seasonal distribution of samples for ", min(liste_annees), "-", max(liste_annees), sep = "")) %>%
tab_spanner(label = as.character(liste_annees[1]), columns = colnames(tableau_saisonnier_large)[2:5]) %>%
tab_spanner(label = as.character(liste_annees[2]), columns = colnames(tableau_saisonnier_large)[6:9]) %>%
tab_spanner(label = as.character(liste_annees[3]), columns = colnames(tableau_saisonnier_large)[10:13]) %>%
cols_align(
align = "center",
columns = everything()
)
print(leTableau_saisonnier)
gtsave(leTableau_saisonnier, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".pdf", sep = "" ))
# Exportation d'une version Excel du tableau de résultats
write_xlsx(tableau_saisonnier_large, paste("resultats/Compilation_saisonniere2018-2020/Seasonal_distribution_", thePartner, ".xlsx", sep = "" ))
#print('\n\n')
}
}
